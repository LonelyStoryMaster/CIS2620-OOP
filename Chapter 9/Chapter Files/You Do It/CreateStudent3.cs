using System;
using static System.Console;

class CreateStudents3 {
    static void Main() {
        Student[] students;

        // AUTOGENERATED STUDENTS
        string[] names = {"Larson", "Johnson", "Franklin", "Smith", "Doe", "Phillips", "Williams", "Hall", "Allen", "Wilson", "Hill",
                          "Wood", "Coleman", "Patterson", "Long", "Thomas", "Coopers", "Baker", "Rivera", "Giardino", "Daniels", "Adams",
                          "Patton", "Renard", "Kaplan", "Quincy", "Danielson", "Faviagno", "Michaelson"};
        double[] gpas;
        gpas = listGPAs(0.0, 4.5);
        students = generateStudents(8, names, 999, gpas);

        // MANUAL STUDENT ENTRIES
        // int id;
        // string name;
        // double gpa;
        // students = new Student[8];
        // for (int i = 0; i < students.Length; i++) {
        //     GetData(out id, out name, out gpa);
        //     students[i] = new Student(id, name, gpa);
        // }

        Array.Sort(students);
        WriteLine("Sorted list: ");
        foreach (Student student in students) {
            WriteLine("{0}", student);
        }
    }

    static void GetData(out int id, out string name, out double gpa) {
        string inString;
        Write("Please enter student ID number: ");
        inString = ReadLine();
        int.TryParse(inString, out id);
        Write("Please enter last name for student: ");
        name = ReadLine();
        Write("Please enter grade point average: ");
        inString = ReadLine();
        double.TryParse(inString, out gpa);
        WriteLine();
    }

    static private double[] listGPAs(double lowGPA, double highGPA) {
        const double STEP = 0.1;
        int numGPAs = (int) ((highGPA - lowGPA) / STEP);
        double[] gpas = new double[numGPAs];
        double gpa = lowGPA;
        for (int i = 0; i < gpas.Length; i++) {
            gpas[i] = gpa;
            gpa += STEP;
        }
        return gpas;
    }

    static Student[] generateStudents(int numStudents, string[] names, int maxId, double[] gpasList) {
        Student[] students = new Student[numStudents];
        Random rando = new Random();
        for (int i = 0; i < students.Length; i++) {
            int namePos = rando.Next(0, names.Length - 1);
            int id = rando.Next(000, maxId);
            int gpaPos = rando.Next(0, gpasList.Length);
            string name = names[namePos];
            double gpa = gpasList[gpaPos];
            students[i] = new Student(id, name, gpa);
        }
        return students;
    }
}

class Student : IComparable {
    public const double HIGHEST_GPA = 4.0;
    public const double LOWEST_GPA = 0.0;
    private int idNumber;
    private string lastName;
    private double gradePointAverage;

    public int IdNumber { get { return this.idNumber;} set { this.idNumber = value;} }
    public string LastName { get { return this.lastName;} set { this.lastName = value;} }
    public double GradePointAverage {
        get { return this.gradePointAverage; }
        set { this.gradePointAverage = (value >= LOWEST_GPA && value <= HIGHEST_GPA) ? value : LOWEST_GPA; }
    }

    public Student(int id, string name, double gpa) {
        this.IdNumber = id;
        this.LastName = name;
        this.GradePointAverage = gpa;
    }

    public Student() : this(0, "XXX", 0.0) { }

    public override string ToString() {
        return String.Format("{0, 5} {1, -10}{2, 6}", this.IdNumber, this.LastName, this.GradePointAverage.ToString("F1"));
    }

    int IComparable.CompareTo(object obj) {
        int returnVal;
        Student temp = (Student) obj;
        if (this.IdNumber > temp.IdNumber) {
            returnVal = 1;
        } else {
            if (this.IdNumber < temp.IdNumber) {
                returnVal = -1;
            } else {
                returnVal = 0;
            }
        }
        return returnVal;
    }
}